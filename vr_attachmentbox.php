<?php
if(!defined('ABSPATH')) {
  die('You are not allowed to call this page directly.');
}

add_action( 'add_meta_boxes','vrfile_addmetaboxes');
add_action( 'save_post', 'vrfile_zip_upload' );
add_action( 'admin_menu','vrfile_settingspage');
add_action( 'plugins_loaded','vrfile_load_textdomain');

function vrfile_addmetaboxes() {
  // Define the custom attachment for apartment
    add_meta_box(
        'vrfile_custom_attachment',
        __('360 view','vr-files'),
        'vrfile_custom_attachment',
        'apartment',
        'advanced'
    );
}

function vrfile_settingspage() {
  add_submenu_page(
        'tools.php',
        'VR Zip Upload Help',
        'VR Upload Help',
        'manage_options',
        'vrfile-settings-page',
        'vrfile_settings_page'
    );
}
/**
* Callback for the Unsub page.
*/
function vrfile_settings_page() {
  global $wpdb;
  echo '<h1>Help for VR uploads:</h1>';
  echo '<p>All uploaded files are stored in a special folder "/vruploads" inside the WP Uploads directory. The path to the zip file and folder are displayed inside the "360 view" Box on the edit screen.</p>';
}

function vrfile_custom_attachment() {     
    $previewlink = get_post_meta(get_the_ID(), 'vr_panorama_url', true);
    if($previewlink) {
      $vrthumb = get_post_meta(get_the_ID(), 'vr_panorama_thumb', true);
      $vrfolder = get_post_meta(get_the_ID(), 'vr_panorama_folder', true);
      echo '<img src="'.$vrthumb.'">';
      echo '<p><a class="button" href="'.$previewlink.'" target="_blank">'.__('Preview','vr-files').'</a></p>';
      echo '<p>'.__('Files for this 360 view are stored in this directory','vr-files').':<br />'.$vrfolder.'</p>';
    echo '<hr>';      
    }
    $aid = get_post_meta(get_the_ID(), 'vrfile_custom_attachment', true);
    $zip_image_file = get_attached_file( $aid );
    echo '<h3>'.__('Upload ZIP package:','vr-files').'</h3>';
    echo '<p><span class="info">'.__('Max upload file size limit is defined by your host. If your zip data is bigger than that, you should first incrase the limit.','vr-files').'</span><br />'.__('The maximum allowed size for uploaded files: ','vr-files').ini_get("upload_max_filesize").'</p>';
    $html = '<p><form name="vruploadform">';
    $html .= wp_nonce_field('vr-upload','vruploadnonce');
    $html .= '<p><input type="file" name="ufile" id="ufile" accept=".zip"></p>';
    $html .= '<input type="submit" value="Upload" name="vrupload" class="button">';
    $html .= '<p style="color: red">'.__('Uploading might take a while! Please stay on this page until it is fully loaded!', 'vr-files').'</p>';
    $html .= '<input type="hidden" value="'.$zip_image_file.'" name="zipfilename">';
    $html .= '</form></p>';
    echo $html;

 
} // end wp_custom_attachment

function vrfile_add_edit_form_multipart_encoding() {

    echo ' enctype="multipart/form-data"';

}
add_action('post_edit_form_tag', 'vrfile_add_edit_form_multipart_encoding');


function vrfile_zip_upload() {
  if(isset($_REQUEST['vrupload'])){
    
    if ( ! function_exists( 'wp_handle_upload' ) ) {
      require_once( ABSPATH . 'wp-admin/includes/file.php' );
    }
    if(!check_admin_referer('vr-upload','vruploadnonce'))wp_die('Failed security check');
    $uploadedfile = $_FILES['ufile'];

    $upload_overrides = array( 'test_form' => false );

    $movefile = wp_handle_upload( $uploadedfile, $upload_overrides);

    $uploadok = 0;
    if ( $movefile && !isset( $movefile['error'] ) ) {
      // echo "File was successfully uploaded.";
      $uploadok = 1;
    }
    else {
    /**
     * Error generated by _wp_handle_upload()
     * @see _wp_handle_upload() in wp-admin/includes/file.php
     */
      echo $movefile['error'];
    }
    if($uploadok) {
    //auto unzip after upload:
    extractvrzip($movefile['file']);
    }
  }
}

function extractvrzip($zipfilename) {

  $post_id = get_the_ID();

  $upload_dir = wp_upload_dir();

  $vr_dir = 'vruploads';
  if (!file_exists($upload_dir['basedir'].'/'.$vr_dir)) {
     wp_mkdir_p($vr_dir, 0755);
  }

  $vr_post_dir = $upload_dir['basedir'].'/'.$vr_dir.'/'.$post_id;
  if (file_exists($vr_post_dir)) {
    delete_directory($vr_post_dir);
    wp_mkdir_p($vr_post_dir, 0755);
  }

  $filename = $zipfilename;    

  if (file_exists($filename)) {        
      $zip = new ZipArchive();
      $open = $zip->open($filename);
      if($open === true) {            
          $target = $vr_post_dir;
          $zip->extractTo($target);
          $zip->close();
          $newpath = _wp_relative_upload_path($target);
          $folderpath = $upload_dir['baseurl'].'/'.$newpath;
          $htmlfile = glob($target.'/*.html');
          $imgfile = glob($target.'/*data/thumbnail.jpg');
          $htmlpath = pathinfo(basename(array_pop($htmlfile)));
          $imgpath = pathinfo(dirname(array_pop($imgfile)));
          $panoramaurl = $folderpath.'/'.$htmlpath['basename'];
          $panoramathumb = $folderpath.'/'.$imgpath['basename'].'/thumbnail.jpg';
          update_post_meta($post_id, 'vr_panorama_thumb', $panoramathumb);
          update_post_meta($post_id, 'vr_panorama_url', $panoramaurl);
          update_post_meta($post_id, 'vr_panorama_folder', $folderpath);
          unlink($filename);
      } else {
          return false;
      }
  }
  else {
    echo 'There was an error unzipping the file.';
  }  
  
}

function delete_directory($dir) {
  if (is_dir($dir)) {
        $objects = scandir($dir);
        foreach ($objects as $object) {
            if ($object != "." && $object !="..") {
                if (filetype($dir . DIRECTORY_SEPARATOR . $object) == "dir") {
                    delete_directory($dir . DIRECTORY_SEPARATOR . $object);
                } else {
                    unlink($dir . DIRECTORY_SEPARATOR . $object);
                }
            }
        }
    reset($objects);
    rmdir($dir);
    }
}

function vrfile_load_textdomain() {
  load_plugin_textdomain( 'vrfile', false, dirname( plugin_basename( __FILE__ ) ).'/lang' );
}
?>